/* Author: Hao Wu 
 * A simple state machine language for specifying state machines.
 * 03-July-2020
 */
grammar StateMachine;
options {
    superClass = BaseParser;
    backtrack=true;
    memoize=true;
}

@header{
package org.nuim.cyclone.parser;
import java.util.Collections;
import java.util.Arrays;
import org.nuim.cyclone.parser.ast.*;
import org.nuim.cyclone.model.type.*;
import org.nuim.cyclone.model.value.*;
}

@lexer::header {
package org.nuim.cyclone.parser;
}

@lexer::members {
    private ParseErrorHandler fParseErrorHandler;

    public String getFilename() {
        return fParseErrorHandler.getFileName();
    }
    
    @Override
    public String getErrorHeader(RecognitionException e) {
    	return "line " + e.line + ":" + e.charPositionInLine;
    }
    	
    public void emitErrorMessage(String msg) {
        fParseErrorHandler.reportError(msg);
    }
 
    public void init(ParseErrorHandler handler) {
        fParseErrorHandler = handler;
    }
}

machine returns [ASTMachine machine]:

    MACHINE name=identifier {$machine = new ASTMachine( ((ASTIdentifier) name).identifier() );} LBRACE
        (v=globalVariableDecl {$machine.addVariable(v);})*
        (s=state {$machine.addState(s);} )* 
        (t=trans {$machine.addTrans(t);})*
        (i=invariantExpression {$machine.addInv(i);})*
    RBRACE EOF
;

state returns [ASTState aststate]
@init{
    $aststate=new ASTState();
}
:
    (m=stateModifier  
        { 
            try{
                $aststate.setModifier(m);
            }
            catch (SemanticException exception){
                System.err.println(exception.getMessage());
            }
        } 
    ) * {
        try{
            if (!$aststate.isModifierSet()) 
                $aststate.setModifier(ASTStateModifier.NORMAL);
        }
        catch (SemanticException exception){System.err.println(exception.getMessage());}
    }

    STATE e=identifier {$aststate.setName(e.identifier());$aststate.setToken(e.token());} LBRACE
        (v=localVariableDecl {$aststate.addVar(v);}  )*
        (expr=expression SEMI {$aststate.addExpr(expr);} )*
    RBRACE
;

trans returns [ASTTransition asttran]
@init{
     $asttran = new ASTTransition();
}
: TRANS (name = identifier) {$asttran.setName(name.identifier());} LBRACE
        (src = identifier) {$asttran.setSrc(src.token());} 
        ARROW (tar = identifier) {$asttran.setTar(tar.token());}
        ON (l=label) {$asttran.setLabel(l.toString());}
        (WHERE e=expression {$asttran.setExpression(e);} SEMI)?
    RBRACE
;

invariantExpression returns [ASTInvariant astinv]
@init{
    $astinv = new ASTInvariant();
}
:   INVARIANT 
       name = identifier {$astinv.setToken(name.token());}
    LBRACE 
        (e=expression SEMI {$astinv.addExpr(e);})+ 
    RBRACE
    
    (FOR LBRACE s=identifier {$astinv.addState(s);} (COMMA t=identifier {$astinv.addState(t);} )* RBRACE)?
;

label returns [ASTLiteral literal_node]:
    s=STRINGLITERAL{$literal_node=new ASTLiteral(ASTLiteral.LiteralType.STRING,s);}
;

identifier returns [ASTIdentifier expr]:
    str=IDENT {$expr= new ASTIdentifier(str);}
;

stateModifier returns [ASTStateModifier modifier]: 
      START {$modifier=ASTStateModifier.START;}
    | FINAL {$modifier=ASTStateModifier.FINAL;}
    | ABSTRACT {$modifier=ASTStateModifier.ABSTRACT;}
    | NORMAL {$modifier=ASTStateModifier.NORMAL;}
;

literal returns [ASTLiteral literal_node]:
      l=INTLITERAL {$literal_node=new ASTLiteral(ASTLiteral.LiteralType.INT,l);}
    | r=REALLITERAL {$literal_node=new ASTLiteral(ASTLiteral.LiteralType.REAL,r);}
    | b=BOOLLITERAL {$literal_node=new ASTLiteral(ASTLiteral.LiteralType.BOOL,b);}
    | s=STRINGLITERAL {$literal_node=new ASTLiteral(ASTLiteral.LiteralType.STRING,s);}
    | c=CHARLITERAL {$literal_node=new ASTLiteral(ASTLiteral.LiteralType.CHAR,c);}
;

globalVariableDecl returns [ASTVariable v]:
    t=type n=variableDeclarator {n.type=t;n.createVariable();$v=n;}
    SEMI
;

localVariableDecl returns [ASTVariable v]:
    t=type n=variableDeclarator {n.type=t;n.createVariable();$v=n;}
    SEMI
;

modifier :
        'global'
    |   'native'
;

type returns [Type t] :
        p=primitiveType {$t=p;}
    |   e=enumType{$t=e;}
;

primitiveType returns [Type t]:
      INT {$t= new IntType();}
    | BOOL {$t=new BoolType();}
    | REAL {$t=new RealType();} 
    | STRING {$t=new StringType();}
;

enumType returns [EnumType t] :
    ENUM {$t=new EnumType();} LBRACE name=identifier {$t.add(name.toString());} 
    (COMMA l=identifier {$t.add(l.toString());})* RBRACE
;

variableDeclarator returns [ASTVariable var]:
    {$var=new ASTVariable();}
    n=identifier 
        {
            $var.name=n.toString();
            $var.setToken( ((ASTIdentifier)n).token());
        }
    ('=' n=variableInitializer {$var.initializer=n;})? 
    (WHERE e=expression {$var.constraint=e;}) ?
;

variableInitializer returns [ASTExpression expr]: 
        n=expression {$expr=n;}
    ;

expression returns [ASTExpression expr]:
        nImpliesExpr = conditionalImpliesExpression {$expr=$nImpliesExpr.expr;}
        ( 
            operator=assignmentOperator nExpr=expression
            {
                $expr=new ASTAssignment(operator,nImpliesExpr,nExpr);
            }
        ) ?
    ;

assignmentOperator returns [Token token]
    :   t= '='  {$token=t;}
    |   t= '+=' {$token=t;}
    |   t= '-=' {$token=t;}
    |   t= '*=' {$token=t;}
    |   t= '/=' {$token=t;}
;

conditionalImpliesExpression returns [ASTExpression expr]
    :   nOrExpr=conditionalOrExpression {$expr=$nOrExpr.expr;}
        (
            operator=IMPLIES n1=conditionalOrExpression 
            {$expr= new ASTBinaryExpression($operator,$expr,$n1.expr);}
        )*
;

conditionalOrExpression returns [ASTExpression expr]
    :   nAndExpr=conditionalAndExpression {$expr=$nAndExpr.expr;}
        (
            operator='||' n1=conditionalAndExpression
            {$expr= new ASTBinaryExpression($operator,$expr,$n1.expr);}
        )*
    ;

conditionalAndExpression returns [ASTExpression expr]
    :   nXorExpr=conditionalXorExpression {$expr=$nXorExpr.expr;}
        ( 
             operator='&&' n1=conditionalXorExpression
             {$expr= new ASTBinaryExpression($operator,$expr,$n1.expr);}
        )*
    ;

conditionalXorExpression returns [ASTExpression expr]
    :   nEquality=equalityExpression {$expr=$nEquality.expr;}
        (
            operator=XOR n1=equalityExpression
            {$expr= new ASTBinaryExpression($operator,$expr,$n1.expr);}
        )*
;

equalityExpression returns [ASTExpression expr]
    :   nRelExpr = relationalExpression {$expr=$nRelExpr.expr;}
    (
        operator=('==' | '!=' ) n1=relationalExpression 
        {$expr= new ASTBinaryExpression($operator,$expr,$n1.expr);}
    )*
;

relationalExpression returns [ASTExpression expr]
    : nAddExpr=additiveExpression {$expr=$nAddExpr.expr;}
        (
            operator=relationalOp n1=additiveExpression
            {$expr= new ASTBinaryExpression(operator,$expr,$n1.expr);}
        )*
;

relationalOp returns [Token token]
    :    t='<=' {$token=t;}
    |    t='>=' {$token=t;}
    |    t='<'  {$token=t;}
    |    t='>'  {$token=t;}
    ;

additiveExpression returns [ASTExpression expr]
    :   nMulExpr=multiplicativeExpression {$expr=$nMulExpr.expr;}
        (   
            operator=('+' | '-') n1=multiplicativeExpression
            {$expr= new ASTBinaryExpression(operator,$expr,$n1.expr);}
        )*
    ;

multiplicativeExpression returns [ASTExpression expr]
    :
        nUnrExpr=unaryExpression {$expr=$nUnrExpr.expr;}
        (   
            operator = (   '*' |   '/' |   '%' )
            m1=unaryExpression {$expr = new ASTBinaryExpression(operator,$expr, $m1.expr);}
        )*
    ;

unaryExpression returns [ASTExpression expr]
    :   '+' unrExpr=unaryExpression {$expr=$unrExpr.expr;}
    |   '-' unrExpr=unaryExpression 
    {   
        if (unrExpr.isASTLitreal())
            ((ASTLiteral)unrExpr).setMinus();

        if (unrExpr.isASTIdentifier())
            ((ASTIdentifier)unrExpr).setMinus();
        
        $expr=unrExpr;
    }
    //|   '++' unaryExpression
    //|   '--' unaryExpression 
    |   nUnrExprOther=unaryExpressionNotPlusMinus {$expr=$nUnrExprOther.expr;}
    ;

unaryExpressionNotPlusMinus returns [ASTExpression expr]
@ini{
    Token op =null;
}
    :   not='!' UnrExpr=unaryExpression {$expr=new ASTUnaryExpression($not,$UnrExpr.expr);}
    |   nPriExpr=primary postfix=('--' | '++')?
        {
            if (postfix!=null)
                $expr=new ASTUnaryExpression($postfix,$nPriExpr.expr);
            else{
                //System.out.println("non-unary expression");
                $expr=nPriExpr;
            }
        }
    ;

primary returns [ASTExpression expr]
    :   pExpr=parExpression {$expr=$pExpr.expr;}
    |   id=identifier
        ( DOT member=identifier )?
        {
            if (member==null){
                ((ASTIdentifier)id).setExpression();
                $expr=id;
            }
            else{
                ASTMember m = new ASTMember(id.token(), id, member);
                $expr = m;
            }
        }
    |   nLiteralExpr=literal {$expr=$nLiteralExpr.literal_node;}
    |   PREV LPAREN pid=identifier RPAREN {
            ((ASTIdentifier)pid).setExpression();
            pid.setPrevious();
            $expr=pid;
        }

    ;

parExpression returns [ASTExpression expr]
    :   '(' e=expression {$expr=$e.expr;} ')'
    ;