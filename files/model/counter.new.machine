/* 
 * Simple state machine to test semantics
 * see counter.new.jpg
 */

machine SM1{
	int counter;
	int M;

    /* START state */
	start state S0{
		counter := 0;
	}

	/* COUNT state */
	final state S1{
		counter := counter+1;
	}

    /* transitions */
	transition t1 {S0 -> S1 when counter == 0;}
	transition t2 {S1 -> S0 when counter == M-1;}
	transition t3 {S1 -> S1 when counter < M-1;}

	invariant Safty {counter <= M;} for {S1}
	invariant Safty {counter <= M;} for {S0,S1}
	invariant Zeno true for {S0,S1}  // I don't know how to express this in first-order-logic, but the idea is that 
	                                 // S0 should not reenter S0 without trigger t3 at least once
}
